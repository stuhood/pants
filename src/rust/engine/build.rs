// Copyright 2017 Pants project contributors (see CONTRIBUTORS.md).
// Licensed under the Apache License, Version 2.0 (see LICENSE).

#![deny(warnings)]
// Enable all clippy lints except for many of the pedantic ones. It's a shame this needs to be copied and pasted across crates, but there doesn't appear to be a way to include inner attributes from a common source.
#![deny(
  clippy::all,
  clippy::default_trait_access,
  clippy::expl_impl_clone_on_copy,
  clippy::if_not_else,
  clippy::needless_continue,
  clippy::unseparated_literal_suffix,
  // TODO: Falsely triggers for async/await:
  //   see https://github.com/rust-lang/rust-clippy/issues/5360
  // clippy::used_underscore_binding
)]
// It is often more clear to show that nothing is being moved.
#![allow(clippy::match_ref_pats)]
// Subjective style.
#![allow(
  clippy::len_without_is_empty,
  clippy::redundant_field_names,
  clippy::too_many_arguments
)]
// Default isn't as big a deal as people seem to think it is.
#![allow(clippy::new_without_default, clippy::new_ret_no_self)]
// Arc<Mutex> can be more clear than needing to grok Orderings:
#![allow(clippy::mutex_atomic)]

use std::env;
use std::path::PathBuf;

/// In order to allow `cargo run` to work directly, we move the thirdparty resources that are
/// produced by the `FileManifest.install` call in `pyoxidizer.bzl` to the location where they
/// expected to live.
fn move_requirements() {
  let manifest_dir = PathBuf::from(env::var("CARGO_MANIFEST_DIR").unwrap());
  let profile = env::var("PROFILE").unwrap();
  let requirements_src = manifest_dir.join("pyembed-gen").join("requirements").join("thirdparty_requirements");
  let requirements_dst = manifest_dir.join("target").join(profile).join("thirdparty_requirements");
  let _ = std::fs::remove_file(&requirements_dst);
  std::os::unix::fs::symlink(&requirements_src, &requirements_dst).unwrap();
}

fn main() {
  move_requirements();

  // Initialize the pyembed crate.
  if let Ok(config_rs) = env::var("DEP_PYTHONXY_DEFAULT_PYTHON_CONFIG_RS") {
    println!(
      "cargo:rustc-env=PYOXIDIZER_DEFAULT_PYTHON_CONFIG_RS={}",
      config_rs
    );
  } else {
    panic!("unable to find build artifacts generated by pyembed crate");
  }
}
